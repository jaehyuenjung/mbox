// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                       String  @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @map("refreshToken") @db.Text
  refresh_token_expires_in Int?    @map("refreshTokenExpiresIn")
  access_token             String? @map("accessToken") @db.Text
  expires_in               Int?    @map("expiresIn")
  expires_at               Int?    @map("expiresAt")
  token_type               String? @map("tokenType")
  scope                    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  albums        Album[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Album {
  id          Int          @id @default(autoincrement())
  userId      String
  title       String
  description String?      @db.Text
  tags        String?
  password    String?
  imagePath   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  pages       Pagination[]
}

model Pagination {
  id      Int     @id @default(autoincrement())
  albumId Int
  no      Int
  album   Album   @relation(fields: [albumId], references: [id], onDelete: Cascade)
  photos  Photo[]
}

model Photo {
  id           Int        @id @default(autoincrement())
  paginationId Int
  title        String
  description  String?    @db.Text
  width        Int
  height       Int
  tags         String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  pagination   Pagination @relation(fields: [paginationId], references: [id], onDelete: Cascade)
}
